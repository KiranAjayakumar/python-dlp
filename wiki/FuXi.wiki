#labels Phase-Implementation,Phase-Requirements,Featured,Phase-Deploy,Phase-QA,Phase-Design
FuXi (pronounced foo-shee) is a forward-chaining production system for Notation 3 Description Logic Programming.

= Introduction =

FuXi (pronounced foo-shee) is a forward-chaining production system for Notation 3 Description Logic Programming.  It is implemented as a companion to RDFLib  â€“ which it requires for its various RDF processing.  


= Details =

  * FuXi is now [http://python-dlp.googlecode.com/svn/trunk/fuxi/ part] of the python-dlp SVN source tree

=== Background of RETE and RETE/UL Algorithms ===

It relies on Charles Forgy's Rete algorithm [4] for the many pattern/many object match problem.  It also implements algorithms outlined in the PhD thesis (1995) of Robert Doorenbos:

    Production Matching for Large Learning Systems.

Robert's thesis describes a modification of the original Rete algorithm that (amongst other things) limits 
the fact syntax (referred to as Working Memory Elements) to 3-item tuples (which corresponds quite nicely with
 the RDF abstract syntax).  The thesis also describes methods for using hash tables to improve efficiency of 
alpha nodes and beta nodes.  

An introductory description from the above:

    Rete (usually pronounced either "REET" or "REE-tee," from the Latin word for "network") deals with a production memory (PM) and a working memory (WM). Each of these may change gradually over time. The working memory is a set of items which (in most systems) represent facts about the system's current situation - the state of the external world and/or the internal problem-solving state of the system itself. Each item in WM is called a working memory element,or a WME.

The production memory is a set of productions (i.e., rules). A production is specified as a set of conditions,
 collectively called the left-hand side (LHS), and a set of actions, collectively called the right-hand side (RHS).

=== Roadmap & Limitations ===

FuXi currently implements production capabilities for a limited subset of Notation 3.  In particular built-ins
 are not implemented as they have a significant impact on the efficiency of a RETE network (which was really 
only intended for pattern matching).  Robert's thesis includes algorithms / heuristics for implementing support for:

  * Negation 
  * Non-equality tests (read: built-in support)
  * Live addition/removal of rules
  * Support for removal of triples / WMEs